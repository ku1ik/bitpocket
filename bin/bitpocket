#!/bin/bash

export LC_ALL=C # for stable "sort" output

DOT_DIR=.bitpocket
CFG_FILE="$DOT_DIR/config"
TMP_DIR="$DOT_DIR/tmp"
STATE_DIR="$DOT_DIR/state"
LOCK_FILE="$TMP_DIR/lock"
SLOW_SYNC_TIME=10
SLOW_SYNC_FILE="$TMP_DIR/slow"

[ -f "$CFG_FILE" ] && . "$CFG_FILE"

function init {
  if [[ -d "$DOT_DIR" || -f "$CFG_FILE" ]]; then
    echo "fatal: Current directory already initialized for bitpocket"
    exit 128
  fi

  if [ -z $1 ]; then
    echo "usage: bitpocket init <REMOTE>"
    echo
    echo "<REMOTE> can be local path or host:path"
    exit 128
  fi

  mkdir "$DOT_DIR"

  cat <<EOF > "$CFG_FILE"
REMOTE="$1"
###IMPORTANT TO SET THE FOLLOWING LINES!
## Specify all ssh opts to connect to your server
## e.g. SSH_OPTS="-p 22 -i .bitpocket/id_rsa user@domain"
SSH_OPTS=""
##Specify the path to BitPocketMaster
## e.g. "~/BitPocketMaster"
BITPOCKETMASTER="~/BitPocketMaster"

##Uncomment following lines to get sync notifications
# SLOW_SYNC_TIME=10
# SLOW_SYNC_START_CMD="notify-send 'BitPocket sync in progress...'"
# SLOW_SYNC_STOP_CMD="notify-send 'BitPocket sync finished'"

## Uncomment following line to follow symlinks (transform it into referent file/dir)
# RSYNC_OPTS="L"

## Uncomment to set a ssh port
# export RSYNC_RSH="ssh -p 22"

## Uncomment to use a certificate for ssh authentification
# export RSYNC_RSH="ssh -p 22 -i .bitpocket/id_rsa"
EOF

  echo "Initialized bitpocket directory at `pwd`"
  echo "Please have a look at the config file (.bitpocket/config)"
}

function log {
  assert_dotdir
  tail -f "$DOT_DIR/log"
}

function sync {
  assert_dotdir
  acquire_lock
  assert_remote_dotdir
  acquire_remote_lock

  echo -e "\e[1;32mbitpocket\e[0m started at `date`."
  echo

  # check what has changed
  touch "$STATE_DIR/tree-prev"
  find . | sort | cut -d '.' -f 2- | egrep -v "^/$DOT_DIR" > "$STATE_DIR/tree-current"

  # prevent bringing back locally deleted files
  comm -23 "$STATE_DIR/tree-prev" "$STATE_DIR/tree-current" >"$TMP_DIR/fetch-exclude"

  # prevent removing new local files
  comm -13 "$STATE_DIR/tree-prev" "$STATE_DIR/tree-current" >>"$TMP_DIR/fetch-exclude"

  # don't sync user excluded files
  if [ -f "$DOT_DIR/exclude" ]; then
    user_exclude="--exclude-from $DOT_DIR/exclude"
  fi

  # fire off slow sync start notifier in background
  on_slow_sync_start

  # fetch everything new and updated, locally remove files deleted on remote
  rsync -auvzxi --delete $RSYNC_OPTS --exclude "/$DOT_DIR" $user_exclude --exclude-from "$TMP_DIR/fetch-exclude" $REMOTE/ . || die

  # send new and updated, remotely remove files deleted locally
  rsync -auvzxi --delete $RSYNC_OPTS --exclude "/$DOT_DIR" $user_exclude . $REMOTE/ || die

  # fire off slow sync stop notifier in background
  on_slow_sync_stop

  # save tree state for next run
  mv "$STATE_DIR/tree-current" "$STATE_DIR/tree-prev"

  cleanup
}

function on_slow_sync_start {
  if [ -n "$SLOW_SYNC_START_CMD" ]; then
    rm -rf "$SLOW_SYNC_FILE"
    (sleep $SLOW_SYNC_TIME && touch "$SLOW_SYNC_FILE" && eval "$SLOW_SYNC_START_CMD" ; wait) &
    disown
    shell_pid=$!
  fi
}

function on_slow_sync_stop {
  if [ -n "$shell_pid" ]; then
    kill $shell_pid &>/dev/null

    if [[ -n "$SLOW_SYNC_STOP_CMD" && -f "$SLOW_SYNC_FILE" ]]; then
      (eval "$SLOW_SYNC_STOP_CMD") &
    fi
  fi
}

function cron {
  DISPLAY=:0.0 sync 2>&1 >>"$DOT_DIR/log"
}

function acquire_lock {
  [ -f "$LOCK_FILE" ] && echo "There is already an instance of BitPocket syncing this directory." && echo "If you're sure thats wrong, remove $LOCK_FILE and try again." && kill -0 $(cat "$LOCK_FILE") &>/dev/null && exit 0
  echo $$ > "$LOCK_FILE"
}

function release_lock {
  rm "$LOCK_FILE"
}

function acquire_remote_lock {
  ssh $SSH_OPTS "cd $BITPOCKETMASTER && [ -f "$LOCK_FILE" ]" && echo "Another client is syncing with your server. I'll wait 10 seconds and try again." && sleep 10
  ssh $SSH_OPTS "cd $BITPOCKETMASTER && [ -f "$LOCK_FILE" ]" && echo "Another client is still syncing with your server." && echo "If you're sure thats wrong, remove $LOCK_FILE on server and try again." && kill -0 $(cat "$LOCK_FILE") &>/dev/null && exit 0
  ssh $SSH_OPTS "cd $BITPOCKETMASTER && echo $$ > "$LOCK_FILE""
}

function release_remote_lock {
  ssh $SSH_OPTS "cd $BITPOCKETMASTER && rm "$LOCK_FILE""
}

function assert_dotdir {
  if [ ! -d "$DOT_DIR" ]; then
    echo "fatal: Not a bitpocket directory"
    exit 128
  fi
  mkdir -p "$TMP_DIR"
  mkdir -p "$STATE_DIR"
}

function assert_remote_dotdir {
  ssh $SSH_OPTS "cd $BITPOCKETMASTER && mkdir -p "$TMP_DIR""
}

function cleanup {
  release_remote_lock
  release_lock
}

function bring_the_children_let_me_kill_them {
  if [ -n "$shell_pid" ]; then
    pkill -P $shell_pid &>/dev/null
    kill $shell_pid &>/dev/null
  fi
}

function die {
  cleanup
  bring_the_children_let_me_kill_them

  echo "fatal: command failed"
  exit 128
}


if [ "$1" = "init" ]; then
  init $2
elif [ "$1" = "log" ]; then
  log
elif [ "$1" = "cron" ]; then
  cron
else
  sync
fi
