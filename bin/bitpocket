#!/bin/bash

export LC_ALL=C # for stable "sort" output

# Paths
DOT_DIR=.bitpocket
CFG_FILE="$DOT_DIR/config"
TMP_DIR="$DOT_DIR/tmp"
STATE_DIR="$DOT_DIR/state"
LOCK_FILE="$TMP_DIR/lock"

# Default settings
SLOW_SYNC_TIME=10
SLOW_SYNC_FILE="$TMP_DIR/slow"
RSYNC_RSH="ssh"

# Load config file
[ -f "$CFG_FILE" ] && . "$CFG_FILE"

# Decide on runner (ssh / bash -c)
if [ -n "$REMOTE_HOST" ]; then
  REMOTE_RUNNER="$RSYNC_RSH $REMOTE_HOST"
  REMOTE="$REMOTE_HOST:$REMOTE_PATH"
else
  REMOTE_RUNNER="bash -c"
  REMOTE="$REMOTE_PATH"
fi

REMOTE_TMP_DIR="$REMOTE_PATH/$DOT_DIR/tmp"

export RSYNC_RSH

function init {
  if [[ -d "$DOT_DIR" || -f "$CFG_FILE" ]]; then
    echo "fatal: Current directory already initialized for bitpocket"
    exit 128
  fi

  if [[ $# != 2 ]]; then
    echo "usage: bitpocket init <REMOTE_HOST> <REMOTE_PATH>"
    exit 128
  fi

  mkdir "$DOT_DIR"

  cat <<EOF > "$CFG_FILE"
## Host and path of central storage
REMOTE_HOST=$1
REMOTE_PATH="$2"

## SSH command with options for connecting to \$REMOTE
# RSYNC_RSH="ssh -p 22 -i $DOT_DIR/id_rsa"

## Uncomment following line to follow symlinks (transform it into referent file/dir)
# RSYNC_OPTS="-L"

## Uncomment following lines to get sync notifications
# SLOW_SYNC_TIME=10
# SLOW_SYNC_START_CMD="notify-send 'BitPocket sync in progress...'"
# SLOW_SYNC_STOP_CMD="notify-send 'BitPocket sync finished'"
EOF

  echo "Initialized bitpocket directory at `pwd`"
  echo "Please have a look at the config file ($DOT_DIR/config)"
}

function log {
  assert_dotdir
  tail -f "$DOT_DIR/log"
}

function sync {
  assert_dotdir
  acquire_lock
  acquire_remote_lock

  echo -e "\e[1;32mbitpocket\e[0m started at `date`."
  echo

  # check what has changed
  touch "$STATE_DIR/tree-prev"
  find . -printf "/%P\0" | egrep -vzZ "^/$DOT_DIR" > "$STATE_DIR/tree-current"

  # prevent bringing back locally deleted files or removing new local files
  sort -z "$STATE_DIR/tree-prev" "$STATE_DIR/tree-current" | uniq -u -z > "$TMP_DIR/fetch-exclude"

  # don't sync user excluded files
  if [ -f "$DOT_DIR/exclude" ]; then
    user_exclude="--exclude-from $DOT_DIR/exclude"
  fi

  # fire off slow sync start notifier in background
  on_slow_sync_start

  # fetch everything new and updated, locally remove files deleted on remote
  echo  "Fetching changes from server"
  rsync -auvzxi --delete $RSYNC_OPTS --exclude "/$DOT_DIR" $user_exclude --from0 --exclude-from "$TMP_DIR/fetch-exclude" $REMOTE/ . || die

  # send new and updated, remotely remove files deleted locally
  echo "Pushing changes to server"
  rsync -auvzxi --delete $RSYNC_OPTS --exclude "/$DOT_DIR" $user_exclude --from0 . $REMOTE/ || die

  # fire off slow sync stop notifier in background
  on_slow_sync_stop

  # save new tree state for next run
  find . -printf "/%P\0" | egrep -vzZ "^/$DOT_DIR" > "$STATE_DIR/tree-prev"

  cleanup
}

function on_slow_sync_start {
  if [ -n "$SLOW_SYNC_START_CMD" ]; then
    rm -rf "$SLOW_SYNC_FILE"
    (sleep $SLOW_SYNC_TIME && touch "$SLOW_SYNC_FILE" && eval "$SLOW_SYNC_START_CMD" ; wait) &
    disown
    shell_pid=$!
  fi
}

function on_slow_sync_stop {
  if [ -n "$shell_pid" ]; then
    kill $shell_pid &>/dev/null

    if [[ -n "$SLOW_SYNC_STOP_CMD" && -f "$SLOW_SYNC_FILE" ]]; then
      (eval "$SLOW_SYNC_STOP_CMD") &
    fi
  fi
}

function cron {
  DISPLAY=:0.0 sync 2>&1 >>"$DOT_DIR/log"
}

function acquire_lock {
  if [ -f "$LOCK_FILE" ]; then
    kill -0 $(cat "$LOCK_FILE") &>/dev/null

    if [[ $? == 0 ]]; then
      echo "There's already an instance of BitPocket syncing this directory. Exiting."
      exit 1
    else
      echo "There's stale lock file at $LOCK_FILE. Please remove it and try again."
      exit 2
    fi
  fi

  echo $$ > "$LOCK_FILE"
}

function release_lock {
  rm "$LOCK_FILE" &>/dev/null
}

function acquire_remote_lock {
  $REMOTE_RUNNER "mkdir -p \"$REMOTE_TMP_DIR\"; cd \"$REMOTE_PATH\" && [ ! -f \"$LOCK_FILE\" ] && touch \"$LOCK_FILE\""

  if [[ $? != 0 ]]; then
    echo "Couldn't acquire remote lock. Another client is syncing with $REMOTE or lock file couldn't be created. Exiting."
    release_lock
    exit 3
  fi
}

function release_remote_lock {
  $REMOTE_RUNNER "cd \"$REMOTE_PATH\" && rm \"$LOCK_FILE\" &>/dev/null"
}

function assert_dotdir {
  if [ ! -d "$DOT_DIR" ]; then
    echo "fatal: Not a bitpocket directory"
    exit 128
  fi
  mkdir -p "$TMP_DIR"
  mkdir -p "$STATE_DIR"
}

function cleanup {
  release_lock
  release_remote_lock
}

function bring_the_children_let_me_kill_them {
  if [ -n "$shell_pid" ]; then
    pkill -P $shell_pid &>/dev/null
    kill $shell_pid &>/dev/null
  fi
}

function die {
  cleanup
  bring_the_children_let_me_kill_them

  echo "fatal: command failed"
  exit 128
}


if [ "$1" = "init" ]; then
  init $2 $3 $4
elif [ "$1" = "log" ]; then
  log
elif [ "$1" = "cron" ]; then
  cron
else
  sync
fi
