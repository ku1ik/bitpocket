#!/bin/bash

LANG=$(locale | grep LANG= | sed 's:LANG=::')
if [ -z "$LANG" ]; then
    LANG="C"
fi

export LC_ALL=$LANG # for stable "sort" output

# Paths
DOT_DIR=.bitpocket
CFG_FILE="$DOT_DIR/config"
TMP_DIR="$DOT_DIR/tmp"
STATE_DIR="$DOT_DIR/state"
LOCK_DIR="$TMP_DIR/lock"  # Use a lock directory for atomic locks. See the Bash FAQ http://mywiki.wooledge.org/BashFAQ/045

# Default settings
SLOW_SYNC_TIME=10
SLOW_SYNC_FILE="$TMP_DIR/slow"
RSYNC_RSH="ssh"
REMOTE_BACKUPS=false

# Load config file
[ -f "$CFG_FILE" ] && . "$CFG_FILE"

# Colors
GREEN=""
RED=""
CLEAR=""
YELLOW=""
if [[ -t 1 ]]; then
    GREEN="\x1b\x5b1;32m"
    RED="\x1b\x5b1;31m"
    YELLOW="\x1b\x5b1;33m"
    CLEAR="\x1b\x5b0m"
fi

# Test for GNU versions of core utils. Bail if non-GNU.
sed --version >/dev/null 2>/dev/null
if [ $? -ne 0 ]; then
    echo "fatal: It seems like you are running non-GNU versions of coreutils."
    echo "       It is currently unsafe to use bitpocket with this setup,"
    echo "       so I'll have to stop here. Sorry ..."
    echo "       Please visit http://apple.stackexchange.com/a/88812/33076 to set them up on osx."
    exit 1
fi

# Decide on runner (ssh / bash -c)
if [ -n "$REMOTE_HOST" ]; then
  REMOTE_RUNNER="$RSYNC_RSH $REMOTE_HOST"
  REMOTE="$REMOTE_HOST:$REMOTE_PATH"
else
  REMOTE_RUNNER="bash -c"
  REMOTE="$REMOTE_PATH"
fi

REMOTE_TMP_DIR="$REMOTE_PATH/$DOT_DIR/tmp"

# Don't sync user excluded files
if [ -f "$DOT_DIR/exclude" ]; then
  user_exclude="--exclude-from $DOT_DIR/exclude"
fi

# Specify certain files to include
if [ -f "$DOT_DIR/include" ]; then
  user_include="--include-from $DOT_DIR/include"
fi

# Specify rsync filter rules
if [ -f "$DOT_DIR/filter" ]; then
  # The underscore (_) is required for correct operation
  user_filter="--filter merge_$DOT_DIR/filter"
fi

USER_RULES="$user_filter $user_include $user_exclude"

TIMESTAMP=$(date "+%Y-%m-%d.%H%M%S")

export RSYNC_RSH

function init {
  if [[ -d "$DOT_DIR" || -f "$CFG_FILE" ]]; then
    echo "fatal: Current directory already initialized for bitpocket"
    exit 128
  fi

  if [[ $# != 2 ]]; then
    echo "usage: bitpocket init <REMOTE_HOST> <REMOTE_PATH>"
    exit 128
  fi

  mkdir "$DOT_DIR"

  cat <<EOF > "$CFG_FILE"
## Host and path of central storage
REMOTE_HOST=$1
REMOTE_PATH="$2"

## Backups -----------------------------------
## Make revisions of files on the REMOTE_HOST in the push phase.
REMOTE_BACKUPS=false

## SSH command with options for connecting to \$REMOTE
# RSYNC_RSH="ssh -p 22 -i $DOT_DIR/id_rsa"

## Uncomment following line to follow symlinks (transform it into referent file/dir)
# RSYNC_OPTS="-L"

## Uncomment following lines to get sync notifications
# SLOW_SYNC_TIME=10
# SLOW_SYNC_START_CMD="notify-send 'BitPocket sync in progress...'"
# SLOW_SYNC_STOP_CMD="notify-send 'BitPocket sync finished'"
EOF

  echo "Initialized bitpocket directory at `pwd`"
  echo "Please have a look at the config file ($DOT_DIR/config)"
}

function log {
  assert_dotdir
  tail -f "$DOT_DIR/log"
}

function prefix() {
    while read -r line
    do
        echo "$1$line"
    done
}

function pull() {
  # Actual fetch
  # Pulling changes from server
  # Order of includes/excludes/filters is EXTREMELY important
  echo
  echo "# Pulling changes from server"
  echo "# >> Saving current state and backing up files (if needed)"

  local BACKUP_TARGET="$DOT_DIR/backups/$TIMESTAMP"
  local DO_BACKUP="--backup --backup-dir=$BACKUP_TARGET"

  cp "$STATE_DIR/tree-current" "$TMP_DIR/tree-after"

  # Create a duplicate of STDOUT for logging of backed-up files, and use fd#4
  # for logging of deleted files, which need to be sorted
  exec 3> >(sort > "$TMP_DIR/pull-delete")

  # Determine what will be fetched from server and make backup copies of any
  # local files to be deleted or overwritten.
  #
  # Only delete locally if deleted remotely. To do this, use the remote-del
  # file to set the *R*isk filter flag (allow delete), and protect everything
  # else with the *P*rotect flag.
  #
  # Order of includes/excludes/filters is EXTREMELY important
  prefix "R " < "$TMP_DIR/remote-del" \
  | rsync -auzxi --delete --exclude "/$DOT_DIR" \
        --exclude-from="$TMP_DIR/local-add" \
        --exclude-from="$TMP_DIR/local-del" \
        --filter=". -" \
        --filter="P **" \
        $DO_BACKUP \
        $RSYNC_OPTS $USER_RULES $REMOTE/ . \
  | detect_changes \
  | sed "s/^/  | /" || die "PULL"

  if [[ -d "$BACKUP_TARGET" ]]
  then
      if [[ -n "$(find "$BACKUP_TARGET" -type f)" ]]
      then
          echo "  | Some files were backed up to $BACKUP_TARGET"
      else
          # Some versions of rsync will create the backup dir, even if it doesn't
          # get populated with any backups
          rmdir "$BACKUP_TARGET"
      fi
  fi

  exec 3>&-
}

function detect_changes() {
    # Read file names from STDIN, and, if they exist locally, create a backup
    # of each of the files. If they are requested to be deleted (indicated by
    # the tag at the line beginning), then they are deleted here. Write the
    # filenames to STDOUT which need to be synchronized by `rsync`
    while read -r line
    do
        filename="${line#* }"
        filename="${filename//\`/\\\`}"
        operation=${line%% *}
        if [[ "$operation" == "*deleting" ]]
        then
            # Mark as locally deleted
	    echo "/$filename" >&3
        elif [[ "$operation" =~ \+\+\+\+$ ]]
        then
            # Mark as added locally
            echo "/$filename" >> "$TMP_DIR/tree-after"
        fi
        echo "$line"
    done
}

function push() {
  # Actual push

  # Send new and updated, remotely remove files deleted locally
  # Order of includes/excludes/filters is EXTREMELY important
  echo
  echo "# Pushing changes to server"

  local BACKUP_TARGET="$DOT_DIR/backups/$TIMESTAMP"
  local DO_BACKUP=""
  if [[ $REMOTE_BACKUPS == true ]]
  then
      echo "# >> Saving current state and backing up files (if needed)"
      DO_BACKUP="--backup --backup-dir=$BACKUP_TARGET"
  fi

  # Do not push back remotely deleted files
  prefix "R " < "$TMP_DIR/local-del" \
  | rsync -auzxi --delete $RSYNC_OPTS --exclude "/$DOT_DIR" \
        --exclude-from="$TMP_DIR/remote-del" \
        --filter=". -" \
        --filter="P **" \
        $DO_BACKUP \
        $USER_RULES . $REMOTE/ \
  | sed "s/^/  | /" || die "PUSH"

  if [[ $REMOTE_BACKUPS == true ]]
  then
      $REMOTE_RUNNER "
      cd '$REMOTE_PATH'
      if [[ -d '$BACKUP_TARGET' ]]
      then
          if [[ -n \"\$(find '$BACKUP_TARGET' -type f)\" ]]
          then
              echo '  | Some files were backed up to $BACKUP_TARGET'
          else
              # Some versions of rsync will create the backup dir, even if it doesn't
              # get populated with any backups
              rmdir '$BACKUP_TARGET'
          fi
      fi
      "
  fi
}

function scrub_rsync_list {
    # Capture the 5th column, remove blank lines, drop the `/.` folder/file,
    # and escape files with `[*?` characters in them
    sed -En '/^[dl-]/ {
        s:^\S*\s*\S*\s*\S*\s*\S*\s*:/:
        /^\/\.$/ d
        s:([*?[]):\\\1:g
        p
    }'
}

# Do the actual synchronization
function sync {
  assert_dotdir
  acquire_lock
  acquire_remote_lock

  echo
  echo -e "${GREEN}bitpocket started${CLEAR} at `date`."
  echo

  # Fire off slow sync start notifier in background
  on_slow_sync_start

  # Check what has changed
  touch "$STATE_DIR/tree-prev"

  # Save before-sync state
  # Must be done with rsync itself (rather than find) to respect includes/excludes
  # Order of includes/excludes/filters is EXTREMELY important
  echo "# Capturing current local and remote state"
  echo "  | Root dir: $(pwd)"

  # Collect the current snapshot of the remote tree, if a previous tree
  # snapshot is available locally
  if [[ -s "$STATE_DIR/tree-prev" ]]; then
    echo "  | Root dir: $REMOTE"
    rsync --list-only --recursive --exclude "/$DOT_DIR" $USER_RULES $REMOTE/ \
      | scrub_rsync_list \
      | sort > "$STATE_DIR/remote-tree-current" &
    local remote_tree_pid=$!
  fi

  # Collect the current snapshot of the local tree
  rsync --list-only --recursive --exclude "/$DOT_DIR" $USER_RULES . \
      | scrub_rsync_list \
      | sort > "$STATE_DIR/tree-current" \
      || die "SNAPSHOT"

  # Prevent bringing back locally deleted files
  if [[ -s "$STATE_DIR/tree-prev" ]]; then
    # Escape rsync filter wildcard characters, remove blank lines
    comm -3 "$STATE_DIR/tree-prev" "$STATE_DIR/tree-current" \
    | tee >(grep '^\S' > "$TMP_DIR/local-del") \
    | sed -ne "s:^[[:space:]][^$]::p" > "$TMP_DIR/local-add"
  else
    # In the case of a new sync, where no previous tree snapshot is available,
    # assume all the files on the local side should be protected
    cp "$STATE_DIR/tree-current" "$TMP_DIR/local-add"
    touch "$TMP_DIR/local-del"
  fi

  # Prevent deleting local files which were not deleted remotely
  # ie. Prevent deleting newly added local files
  touch "$TMP_DIR/remote-del"
  if [[ -s "$STATE_DIR/tree-prev" ]]; then
    wait $remote_tree_pid
    comm -23 "$STATE_DIR/tree-prev" "$STATE_DIR/remote-tree-current" \
    > "$TMP_DIR/remote-del"
  fi

  pull
  push

  # Save after-sync state

  # Generate a incremental snapshot of the local tree including files deleted
  # and added via the pull()
  sort "$TMP_DIR/tree-after" \
  | comm -13 "$TMP_DIR/pull-delete" - \
  | sed -e "s:^\s*::" -e "s:/\$::" \
  > "$STATE_DIR/tree-prev"

  rm "$TMP_DIR/tree-after"

  # Fire off slow sync stop notifier in background
  on_slow_sync_stop

  cleanup
  echo
  echo -e "${GREEN}bitpocket finished${CLEAR} at `date`."
  echo

}

# Pack backups into a git repository
function pack {
    assert_dotdir

    # Git is required for backup packing
    if [ ! `builtin type -p git` ]; then
        echo "fatal: For backup packing, git must be installed"
        exit 128
    fi

    # If pack directory is missing, create it and prepare git repo
    if [ ! -d "$DOT_DIR/pack" ]
    then
        mkdir    $DOT_DIR/pack
        git init $DOT_DIR/pack
        touch    $DOT_DIR/pack/.git-init-marker
        (cd $DOT_DIR/pack && git add .)
        (cd $DOT_DIR/pack && git commit -a -q -m "INIT")
    fi

    # If any backups exist, pack them into the repo
    if [ -d "$DOT_DIR/backups" ] && [ "$(ls -A $DOT_DIR/backups)" ]
    then
        for DIR in $DOT_DIR/backups/*
        do
            TSTAMP=$(echo $DIR | sed "s|.*/||")
            if [ "$(ls -A $DIR)" ]
            then
                echo -n "Processing: $TSTAMP ... "
                echo -n "Moving ... "
                (cp -rfl $DIR/* $DOT_DIR/pack && rm -rf $DIR)        || die MV
                echo -n "Adding ... "
                (cd $DOT_DIR/pack && git add .)                      || die ADD
                echo -n "Committing ... "
                # Commit only if repository has uncommitted changes
                (cd $DOT_DIR/pack \
                    && git diff-index --quiet HEAD \
                    || git commit -a -q -m "$TSTAMP" )             || die COMMIT
                echo "Done."
            else
                echo "Removing empty dir $DIR  ..."
                rmdir $DIR
            fi
        done
        echo "Running 'git gc' on pack dir"
        du -hs $DOT_DIR/pack
        (cd $DOT_DIR/pack && git gc) || die GC
        du -hs $DOT_DIR/pack
        echo "All snapshots packed successfully."
    else
        echo "No unpacked backups found ..."
    fi

}

function on_slow_sync_start {
  if [ -n "$SLOW_SYNC_START_CMD" ]; then
    rm -rf "$SLOW_SYNC_FILE"
    (sleep $SLOW_SYNC_TIME && touch "$SLOW_SYNC_FILE" && eval "$SLOW_SYNC_START_CMD" ; wait) &
    disown
    shell_pid=$!
  fi
}

function on_slow_sync_stop {
  if [ -n "$shell_pid" ]; then
    kill $shell_pid &>/dev/null

    if [[ -n "$SLOW_SYNC_STOP_CMD" && -f "$SLOW_SYNC_FILE" ]]; then
      (eval "$SLOW_SYNC_STOP_CMD") &
    fi
  fi
}

function cron {
  DISPLAY=:0.0 sync 2>&1 | timestamp >>"$DOT_DIR/log"
}

function timestamp {
  while read data
  do
      echo "[$(date +"%D %T")] $data"
  done
}

function acquire_lock {
  if ! mkdir "$LOCK_DIR" 2>/dev/null ; then
    kill -0 $(cat "$LOCK_DIR/pid") &>/dev/null

    if [[ $? == 0 ]]; then
      echo "There's already an instance of BitPocket syncing this directory. Exiting."
      exit 1
    else
      echo -e "${RED}bitpocket error:${CLEAR} Bitpocket found a stale lock directory:"
      echo "  | Root dir: $(pwd)"
      echo "  | Lock dir: $LOCK_DIR"
      echo "  | Command:  LOCK_PATH=$(pwd)/$LOCK_DIR && rm \$LOCK_PATH/pid && rmdir \$LOCK_PATH"
      echo "Please remove the lock directory and try again."
      exit 2
    fi
  fi

  echo $$ > "$LOCK_DIR/pid"
}

function release_lock {
  rm "$LOCK_DIR/pid" &>/dev/null && rmdir "$LOCK_DIR" &>/dev/null
}

function acquire_remote_lock {
  $REMOTE_RUNNER "mkdir -p \"$REMOTE_TMP_DIR\"; cd \"$REMOTE_PATH\" && mkdir \"$LOCK_DIR\" 2>/dev/null"

  if [[ $? != 0 ]]; then
    echo "Couldn't acquire remote lock. Another client is syncing with $REMOTE or lock file couldn't be created. Exiting."
    release_lock
    exit 3
  fi
}

function release_remote_lock {
  $REMOTE_RUNNER "cd \"$REMOTE_PATH\" && rmdir \"$LOCK_DIR\" &>/dev/null"
}

function assert_dotdir {
  if [ ! -d "$DOT_DIR" ]; then
    echo "fatal: Not a bitpocket directory. Try 'bitpocket help' for usage."
    exit 128
  fi
  mkdir -p "$TMP_DIR"
  mkdir -p "$STATE_DIR"
}

function cleanup {
  release_lock
  release_remote_lock
}

function bring_the_children_let_me_kill_them {
  if [ -n "$shell_pid" ]; then
    pkill -P $shell_pid &>/dev/null
    kill $shell_pid &>/dev/null
  fi
}

function die {
  cleanup
  bring_the_children_let_me_kill_them

  echo "fatal: command failed $1"
  exit 128
}

# List all files in the sync set
function list {
  echo -e "${GREEN}bitpocket${CLEAR} will sync the following files:"
  rsync -av --list-only --exclude "/$DOT_DIR"  $USER_RULES . \
      | scrub_rsync_list \
      | sort
}

function usage {
  echo "usage:  bitpocket [sync|help|pack|log|cron|list|init <REMOTE_HOST> <REMOTE_PATH>]"
  echo ""
  echo "Available commands:"
  echo "   sync    Run the sync process. If no command is specified, sync is run by default."
  echo "   init    Initialize a new bitpocket folder. Requires remote host and path params."
  echo "   pack    Pack any existing (automatic) backups into a git repository."
  echo "   cron    Run sync optimized for cron, logging output to file instead of stdout."
  echo "   log     Display the log generated by the cron command"
  echo "   list    List all files in the sync set (honoring include/exclude/filter config)."
  echo "   help    Show this message."
  echo ""
  echo "Note: All commands (apart from help), must be run in the root of a"
  echo "      new or existing bitpocket directory structure."
  echo ""

}

if [ "$1" = "init" ]; then
  # Initialize bitpocket directory
  init $2 "$3" $4
elif [ "$1" = "pack" ]; then
  # Pack backups using git
  pack
elif [ "$1" = "log" ]; then
  # Display log file
  log
elif [ "$1" = "cron" ]; then
  # Run through cron?
  cron
elif [ "$1" = "list" ]; then
  # List all file in sync set (honoring .bitpocket/include & .bitpocket/exclude)
  list
elif [ "$1" = "remote-pull" ]; then
  remote_pull $2 "$3"
elif [ "$1" != "" ] && [ "$1" != "sync" ]; then
  # Show help
  usage
else
  # By default, run the sync process
  sync
fi
